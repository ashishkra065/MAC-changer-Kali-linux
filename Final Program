#!/usr/bin/env python

import subprocess
import argparse
import re

def change_mac(interface,new_mac): # this function changes the mac
    subprocess.run(["ifconfig", interface, "down"])
    subprocess.run(["ifconfig", interface, "hw", "ether", new_mac])
    subprocess.run(["ifconfig", interface, "up"])
    print(f"[+] Changing MAC address for {interface} to {new_mac}")

def get_arguments(): #this function provides command line inputs to the program
    parser = argparse.ArgumentParser(description="provide interface and new mac")
    parser.add_argument("-i",dest="interface",help="Interface to change its MAC address")
    parser.add_argument("-m",dest="new_mac",help="New MAC address")
    args=parser.parse_args()
    if not args.interface:
        parser.error("[-] Please specify an interface , Use --help for more info")
    elif not args.new_mac:
        parser.error("[-] Please specify a MAC , use --help for more info")
    return args

def get_current_MAC(interface):    # This Function extracts mac from the ifconfig output
    ifconfig_result = subprocess.check_output(["ifconfig", interface]).decode('utf-8')
    mac_address_search_result = re.search(r"\w\w:\w\w:\w\w:\w\w:\w\w:\w\w", ifconfig_result)
    if mac_address_search_result:
        return mac_address_search_result.group(0)  # 0 here is the index of the numbers of result
    else:
        print("[-] couldn't read the MAC address")

args=get_arguments()

current_mac=get_current_MAC(args.interface)
print("Current MAC =" + str(current_mac))
change_mac(args.interface,args.new_mac)
current_mac=get_current_MAC(args.interface)
if current_mac==args.new_mac:
    print("[+] The MAC address was successfully changed to " + current_mac)
else:
    print("[-] The MAC address did not get changed.")


# ifconfig_result=subprocess.check_output(["ifconfig",interface]).decode('utf-8') # decode here to convert bytes into string
# import argparse
# parser=argparse.ArgumentParser()
# parser.add_argument(Command , Destination, Help{Description})
# args=parser.parse_args( )
# args.interface
#subprocess.check_output to check output
# use regex





